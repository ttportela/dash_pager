{"version":3,"file":"async-Pager.js","mappings":"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","sources":["webpack:///./src/lib/fragments/Pager.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Generic pagination component.\n */\nexport default class Pager extends Component {\n    \n    visibleVal = null;\n    \n    updateInterval = (e) => {\n        let tempVal = e.tempVal;\n        \n        var from = this.visibleVal[0];\n        var to   = this.visibleVal[1];\n\n        if (tempVal) {\n            if (tempVal === 'MM'){\n                from = this.props.minValue;\n            } else if (tempVal === 'M'){\n                from = from-1;\n            } else if (tempVal === 'PP'){\n                to = this.props.maxValue;\n            } else if (tempVal === 'P'){\n                to = to+1;\n            } else if (tempVal.startsWith(\"F\") && \n                isNaN( from = parseInt(tempVal.replace(\"F\", \"\")) )\n               ) {\n                from = tempVal.replace(\"F\", \"\");\n            } else if (tempVal.startsWith(\"T\") && \n                isNaN( to = parseInt(tempVal.replace(\"T\", \"\")) ) \n               ) {\n                to = tempVal.replace(\"T\", \"\");\n            } \n            \n            let newVal = [from, to];\n            if (typeof from === \"number\" && this.props.value[0] != from && from >= 1 && from <= this.props.maxValue) {\n                newVal = [from, this.props.value[1]];\n                this.props.setProps({ 'value': newVal });\n            } else if (typeof to === \"number\" && this.props.value[1] != to && to >= this.props.value[0] && to <= this.props.maxValue) {\n                newVal = [this.props.value[0], to];\n                this.props.setProps({ 'value': newVal });\n            }\n            this.visibleVal = newVal;\n        }\n\n        this.forceUpdate();\n    };\n    \n    render() {\n        const {id, value, maxValue, minValue, symbols, style, setProps} = this.props;\n        \n        if (!this.visibleVal)\n            this.visibleVal = value\n        \n        let from = this.visibleVal[0];\n        let to   = this.visibleVal[1];\n        \n        return (\n            <div id={id+\"-container\"} className=\"form-row\" style={style}>\n                <button id={id+\"-mm\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => this.updateInterval({ tempVal: 'MM' })\n                    }>\n                    <i className=\"bi bi-chevron-double-left\"></i>{symbols[0]}\n                </button>\n                <button id={id+\"-m\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => this.updateInterval({ tempVal: 'M' })\n                    }>\n                    <i className=\"bi bi-chevron-left\"></i>{symbols[1]}\n                </button>\n                <span className=\"me-2\"> From </span>\n                <input\n                    id={id+\"-ip-from\"}\n                    value={from}\n                    onChange={\n                        e => this.updateInterval({ tempVal: 'F'+e.target.value })\n                    }\n                    type=\"number\"\n                    style={{width: \"10ch\", display: \"inline\"}}\n                    className={\"form-control\" + ((from != value[0] || from < minValue || from > to) ? ' is-invalid' : '')}\n                />\n                <span className=\"me-2\"> to </span>\n                <input\n                    id={id+\"-ip-to\"}\n                    value={to}\n                    onChange={\n                        e => this.updateInterval({ tempVal: 'T'+e.target.value })\n                    }\n                    type=\"number\"\n                    style={{width: \"10ch\", display: \"inline\"}}\n                    className={\"form-control\" + ((to != value[1] || to > maxValue || to < from) ? ' is-invalid' : '')}\n                />\n                <span className=\"me-2\"> of {maxValue} </span>\n                <button id={id+\"-p\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => this.updateInterval({ tempVal: 'P' })\n                    }>\n                    <i className=\"bi bi-chevron-right\"></i>{symbols[2]}\n                </button>\n                <button id={id+\"-pp\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => this.updateInterval({ tempVal: 'PP' })\n                    }>\n                    <i className=\"bi bi-chevron-double-right\"></i>{symbols[3]}\n                </button>\n                <input\n                    id={id}\n                    value={value}\n                    type=\"hidden\"\n                />\n            </div>\n        );\n    }\n}\n\nPager.defaultProps = {\n    value: [0,0],\n    minValue: 0,\n    maxValue: 0,\n    symbols: ['','','','']\n};\n\nPager.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * The value displayed in the input.\n     */\n    value: PropTypes.arrayOf(PropTypes.number),\n\n    /**\n     * The maximum number of elements displayed in the input.\n     */\n    maxValue: PropTypes.number,\n\n    /**\n     * The minimum number of elements displayed in the input.\n     */\n    minValue: PropTypes.number,\n    \n    /**\n     * The text symbols for the buttons.\n     */\n    symbols: PropTypes.arrayOf(PropTypes.string),\n    \n    /**\n     * The style of the container (div)\n     */\n    style: PropTypes.object,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func,\n};\n"],"names":["Pager","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_defineProperty","_callSuper","concat","e","tempVal","from","visibleVal","to","props","minValue","maxValue","startsWith","isNaN","parseInt","replace","newVal","value","setProps","forceUpdate","_inherits","key","_this2","_this$props","this","id","symbols","style","React","className","type","onClick","updateInterval","onChange","target","width","display","Component","defaultProps","propTypes","PropTypes"],"sourceRoot":""}