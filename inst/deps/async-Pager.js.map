{"version":3,"file":"async-Pager.js","mappings":"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","sources":["webpack:///./src/lib/fragments/Pager.react.js"],"sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Generic pagination component.\n */\nexport default class Pager extends Component {\n    render() {\n        const {id, value, maxValue, minValue, symbols, tempVal, style, setProps} = this.props;\n        \n        var from = value[0];\n        var to   = value[1];\n\n        if (tempVal) {\n            if (tempVal === 'MM'){\n                from = minValue\n            } else if (tempVal === 'M'){\n                from = from-1\n            } else if (tempVal === 'PP'){\n                to = maxValue\n            } else if (tempVal === 'P'){\n                to = to+1\n            } else if (tempVal.startsWith(\"F\") && \n                isNaN( from = parseInt(tempVal.replace(\"F\", \"\")) )\n               ) {\n                from = tempVal.replace(\"F\", \"\");\n            } else if (tempVal.startsWith(\"T\") && \n                isNaN( to = parseInt(tempVal.replace(\"T\", \"\")) ) \n               ) {\n                to = tempVal.replace(\"T\", \"\");\n            } \n        \n            if (typeof from === \"number\" && value[0] != from && from >= 1 && from <= maxValue)\n                this.props.setProps({ 'value': [from, value[1]], 'tempVal': null });\n            if (typeof to === \"number\" && value[1] != to && to >= value[0] && to <= maxValue)\n                this.props.setProps({ 'value': [value[0], to], 'tempVal': null });\n        }\n        \n        return (\n            <div id={id+\"-container\"} className=\"form-row\" style={style}>\n                <button id={id+\"-mm\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => setProps({ tempVal: 'MM' })\n                    }>\n                    <i className=\"bi bi-chevron-double-left\"></i>{symbols[0]}\n                </button>\n                <button id={id+\"-m\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => setProps({ tempVal: 'M' })\n                    }>\n                    <i className=\"bi bi-chevron-left\"></i>{symbols[1]}\n                </button>\n                <span className=\"me-2\"> From </span>\n                <input\n                    id={id+\"-ip-from\"}\n                    value={from}\n                    onChange={\n                        e => setProps({ tempVal: 'F'+e.target.value })\n                    }\n                    type=\"number\"\n                    style={{width: \"10ch\", display: \"inline\"}}\n                    className={\"form-control\" + ((from != value[0] || from < minValue || from > to) ? ' is-invalid' : '')}\n                />\n                <span className=\"me-2\"> to </span>\n                <input\n                    id={id+\"-ip-to\"}\n                    value={to}\n                    onChange={\n                        e => setProps({ tempVal: 'T'+e.target.value })\n                    }\n                    type=\"number\"\n                    style={{width: \"10ch\", display: \"inline\"}}\n                    className={\"form-control\" + ((to != value[1] || to > maxValue || to < from) ? ' is-invalid' : '')}\n                />\n                <span className=\"me-2\"> of {maxValue} </span>\n                <button id={id+\"-p\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => setProps({ tempVal: 'P' })\n                    }>\n                    <i className=\"bi bi-chevron-right\"></i>{symbols[2]}\n                </button>\n                <button id={id+\"-pp\"} className=\"btn btn-outline-primary me-2\" type=\"button\" \n                    onClick={\n                        e => setProps({ tempVal: 'PP' })\n                    }>\n                    <i className=\"bi bi-chevron-double-right\"></i>{symbols[3]}\n                </button>\n                <input\n                    id={id}\n                    value={value}\n                    type=\"hidden\"\n                />\n            </div>\n        );\n    }\n}\n\nPager.defaultProps = {\n    minValue: 1,\n    symbols: ['','','','']\n};\n\nPager.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * The value displayed in the input.\n     */\n    value: PropTypes.arrayOf(PropTypes.number),\n\n    /**\n     * The maximum number of elements displayed in the input.\n     */\n    maxValue: PropTypes.number.isRequired,\n\n    /**\n     * The minimum number of elements displayed in the input.\n     */\n    minValue: PropTypes.number,\n    \n    /**\n     * The text symbols for the buttons.\n     */\n    symbols: PropTypes.arrayOf(PropTypes.string),\n    \n    /**\n     * The style of the container (div)\n     */\n    style: PropTypes.object,\n\n    /**\n     * The maximum number of elements displayed in the input.\n     */\n    tempVal: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n"],"names":["Pager","_Component","_classCallCheck","_callSuper","arguments","_inherits","key","value","_this$props","this","props","id","maxValue","minValue","symbols","tempVal","style","setProps","from","to","startsWith","isNaN","parseInt","replace","React","className","type","onClick","e","onChange","target","width","display","Component","defaultProps","propTypes","PropTypes","isRequired"],"sourceRoot":""}